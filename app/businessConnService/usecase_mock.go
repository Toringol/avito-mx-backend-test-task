// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package businessConnService is a generated GoMock package.
package businessConnService

import (
	models "github.com/Toringol/avito-mx-backend-test-task/app/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIUsecase is a mock of IUsecase interface
type MockIUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseMockRecorder
}

// MockIUsecaseMockRecorder is the mock recorder for MockIUsecase
type MockIUsecaseMockRecorder struct {
	mock *MockIUsecase
}

// NewMockIUsecase creates a new mock instance
func NewMockIUsecase(ctrl *gomock.Controller) *MockIUsecase {
	mock := &MockIUsecase{ctrl: ctrl}
	mock.recorder = &MockIUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUsecase) EXPECT() *MockIUsecaseMockRecorder {
	return m.recorder
}

// SelectProduct mocks base method
func (m *MockIUsecase) SelectProduct(arg0, arg1 int64) (*models.ProductInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectProduct", arg0, arg1)
	ret0, _ := ret[0].(*models.ProductInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectProduct indicates an expected call of SelectProduct
func (mr *MockIUsecaseMockRecorder) SelectProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectProduct", reflect.TypeOf((*MockIUsecase)(nil).SelectProduct), arg0, arg1)
}

// SelectProductsBySpecificProductInfo mocks base method
func (m *MockIUsecase) SelectProductsBySpecificProductInfo(arg0 *models.UserListRequest) ([]*models.ProductInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectProductsBySpecificProductInfo", arg0)
	ret0, _ := ret[0].([]*models.ProductInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectProductsBySpecificProductInfo indicates an expected call of SelectProductsBySpecificProductInfo
func (mr *MockIUsecaseMockRecorder) SelectProductsBySpecificProductInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectProductsBySpecificProductInfo", reflect.TypeOf((*MockIUsecase)(nil).SelectProductsBySpecificProductInfo), arg0)
}

// CreateProduct mocks base method
func (m *MockIUsecase) CreateProduct(arg0 *models.ProductInfo) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct
func (mr *MockIUsecaseMockRecorder) CreateProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockIUsecase)(nil).CreateProduct), arg0)
}

// UpdateProduct mocks base method
func (m *MockIUsecase) UpdateProduct(arg0 *models.ProductInfo) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct
func (mr *MockIUsecaseMockRecorder) UpdateProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockIUsecase)(nil).UpdateProduct), arg0)
}

// DeleteProduct mocks base method
func (m *MockIUsecase) DeleteProduct(arg0, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProduct indicates an expected call of DeleteProduct
func (mr *MockIUsecaseMockRecorder) DeleteProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockIUsecase)(nil).DeleteProduct), arg0, arg1)
}

// SelectTaskState mocks base method
func (m *MockIUsecase) SelectTaskState(arg0 int64) (*models.TaskState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTaskState", arg0)
	ret0, _ := ret[0].(*models.TaskState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTaskState indicates an expected call of SelectTaskState
func (mr *MockIUsecaseMockRecorder) SelectTaskState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTaskState", reflect.TypeOf((*MockIUsecase)(nil).SelectTaskState), arg0)
}

// CreateTask mocks base method
func (m *MockIUsecase) CreateTask() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask
func (mr *MockIUsecaseMockRecorder) CreateTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockIUsecase)(nil).CreateTask))
}

// UpdateTaskState mocks base method
func (m *MockIUsecase) UpdateTaskState(arg0 int64, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskState", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaskState indicates an expected call of UpdateTaskState
func (mr *MockIUsecaseMockRecorder) UpdateTaskState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskState", reflect.TypeOf((*MockIUsecase)(nil).UpdateTaskState), arg0, arg1)
}

// SelectTaskStatsByTaskID mocks base method
func (m *MockIUsecase) SelectTaskStatsByTaskID(arg0 int64) (*models.TaskStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTaskStatsByTaskID", arg0)
	ret0, _ := ret[0].(*models.TaskStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTaskStatsByTaskID indicates an expected call of SelectTaskStatsByTaskID
func (mr *MockIUsecaseMockRecorder) SelectTaskStatsByTaskID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTaskStatsByTaskID", reflect.TypeOf((*MockIUsecase)(nil).SelectTaskStatsByTaskID), arg0)
}

// CreateTaskStats mocks base method
func (m *MockIUsecase) CreateTaskStats(arg0 *models.TaskStats) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaskStats", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaskStats indicates an expected call of CreateTaskStats
func (mr *MockIUsecaseMockRecorder) CreateTaskStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskStats", reflect.TypeOf((*MockIUsecase)(nil).CreateTaskStats), arg0)
}
